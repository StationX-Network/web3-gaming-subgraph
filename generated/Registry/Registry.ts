// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Lend extends ethereum.Event {
  get params(): Lend__Params {
    return new Lend__Params(this);
  }
}

export class Lend__Params {
  _event: Lend;

  constructor(event: Lend) {
    this._event = event;
  }

  get is721(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get lenderAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenID(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get lendingID(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get maxRentDuration(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get dailyRentPrice(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }

  get lendAmount(): i32 {
    return this._event.parameters[7].value.toI32();
  }

  get paymentToken(): i32 {
    return this._event.parameters[8].value.toI32();
  }

  get willAutoRenew(): boolean {
    return this._event.parameters[9].value.toBoolean();
  }
}

export class Rent extends ethereum.Event {
  get params(): Rent__Params {
    return new Rent__Params(this);
  }
}

export class Rent__Params {
  _event: Rent;

  constructor(event: Rent) {
    this._event = event;
  }

  get renterAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lendingID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rentingID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get rentAmount(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get rentDuration(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get rentedAt(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class RentClaimed extends ethereum.Event {
  get params(): RentClaimed__Params {
    return new RentClaimed__Params(this);
  }
}

export class RentClaimed__Params {
  _event: RentClaimed;

  constructor(event: RentClaimed) {
    this._event = event;
  }

  get rentingID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collectedAt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StopLend extends ethereum.Event {
  get params(): StopLend__Params {
    return new StopLend__Params(this);
  }
}

export class StopLend__Params {
  _event: StopLend;

  constructor(event: StopLend) {
    this._event = event;
  }

  get lendingID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stoppedAt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class StopRent extends ethereum.Event {
  get params(): StopRent__Params {
    return new StopRent__Params(this);
  }
}

export class StopRent__Params {
  _event: StopRent;

  constructor(event: StopRent) {
    this._event = event;
  }

  get rentingID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stoppedAt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Registry__getLendingResult {
  value0: i32;
  value1: Address;
  value2: i32;
  value3: Bytes;
  value4: i32;
  value5: i32;
  value6: i32;

  constructor(
    value0: i32,
    value1: Address,
    value2: i32,
    value3: Bytes,
    value4: i32,
    value5: i32,
    value6: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    return map;
  }

  getValue0(): i32 {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }

  getValue2(): i32 {
    return this.value2;
  }

  getValue3(): Bytes {
    return this.value3;
  }

  getValue4(): i32 {
    return this.value4;
  }

  getValue5(): i32 {
    return this.value5;
  }

  getValue6(): i32 {
    return this.value6;
  }
}

export class Registry__getRentingResult {
  value0: Address;
  value1: i32;
  value2: i32;
  value3: BigInt;

  constructor(value0: Address, value1: i32, value2: i32, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): i32 {
    return this.value1;
  }

  getValue2(): i32 {
    return this.value2;
  }

  getValue3(): BigInt {
    return this.value3;
  }
}

export class Registry extends ethereum.SmartContract {
  static bind(address: Address): Registry {
    return new Registry("Registry", address);
  }

  getLending(
    nftAddress: Address,
    tokenID: BigInt,
    _lendingID: BigInt
  ): Registry__getLendingResult {
    let result = super.call(
      "getLending",
      "getLending(address,uint256,uint256):(uint8,address,uint8,bytes4,uint16,uint16,uint8)",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenID),
        ethereum.Value.fromUnsignedBigInt(_lendingID)
      ]
    );

    return new Registry__getLendingResult(
      result[0].toI32(),
      result[1].toAddress(),
      result[2].toI32(),
      result[3].toBytes(),
      result[4].toI32(),
      result[5].toI32(),
      result[6].toI32()
    );
  }

  try_getLending(
    nftAddress: Address,
    tokenID: BigInt,
    _lendingID: BigInt
  ): ethereum.CallResult<Registry__getLendingResult> {
    let result = super.tryCall(
      "getLending",
      "getLending(address,uint256,uint256):(uint8,address,uint8,bytes4,uint16,uint16,uint8)",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenID),
        ethereum.Value.fromUnsignedBigInt(_lendingID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Registry__getLendingResult(
        value[0].toI32(),
        value[1].toAddress(),
        value[2].toI32(),
        value[3].toBytes(),
        value[4].toI32(),
        value[5].toI32(),
        value[6].toI32()
      )
    );
  }

  getRenting(
    nftAddress: Address,
    tokenID: BigInt,
    _rentingID: BigInt
  ): Registry__getRentingResult {
    let result = super.call(
      "getRenting",
      "getRenting(address,uint256,uint256):(address,uint16,uint8,uint32)",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenID),
        ethereum.Value.fromUnsignedBigInt(_rentingID)
      ]
    );

    return new Registry__getRentingResult(
      result[0].toAddress(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toBigInt()
    );
  }

  try_getRenting(
    nftAddress: Address,
    tokenID: BigInt,
    _rentingID: BigInt
  ): ethereum.CallResult<Registry__getRentingResult> {
    let result = super.tryCall(
      "getRenting",
      "getRenting(address,uint256,uint256):(address,uint16,uint8,uint32)",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenID),
        ethereum.Value.fromUnsignedBigInt(_rentingID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Registry__getRentingResult(
        value[0].toAddress(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toBigInt()
      )
    );
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rentFee(): BigInt {
    let result = super.call("rentFee", "rentFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rentFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rentFee", "rentFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get newResolver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newBeneficiary(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get newAdmin(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimRentCall extends ethereum.Call {
  get inputs(): ClaimRentCall__Inputs {
    return new ClaimRentCall__Inputs(this);
  }

  get outputs(): ClaimRentCall__Outputs {
    return new ClaimRentCall__Outputs(this);
  }
}

export class ClaimRentCall__Inputs {
  _call: ClaimRentCall;

  constructor(call: ClaimRentCall) {
    this._call = call;
  }

  get nftStandard(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }

  get nftAddress(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get tokenID(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _lendingID(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _rentingID(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class ClaimRentCall__Outputs {
  _call: ClaimRentCall;

  constructor(call: ClaimRentCall) {
    this._call = call;
  }
}

export class LendCall extends ethereum.Call {
  get inputs(): LendCall__Inputs {
    return new LendCall__Inputs(this);
  }

  get outputs(): LendCall__Outputs {
    return new LendCall__Outputs(this);
  }
}

export class LendCall__Inputs {
  _call: LendCall;

  constructor(call: LendCall) {
    this._call = call;
  }

  get nftStandard(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }

  get nftAddress(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get tokenID(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get lendAmount(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get maxRentDuration(): Array<i32> {
    return this._call.inputValues[4].value.toI32Array();
  }

  get dailyRentPrice(): Array<Bytes> {
    return this._call.inputValues[5].value.toBytesArray();
  }

  get paymentToken(): Array<i32> {
    return this._call.inputValues[6].value.toI32Array();
  }

  get willAutoRenew(): Array<boolean> {
    return this._call.inputValues[7].value.toBooleanArray();
  }
}

export class LendCall__Outputs {
  _call: LendCall;

  constructor(call: LendCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RentCall extends ethereum.Call {
  get inputs(): RentCall__Inputs {
    return new RentCall__Inputs(this);
  }

  get outputs(): RentCall__Outputs {
    return new RentCall__Outputs(this);
  }
}

export class RentCall__Inputs {
  _call: RentCall;

  constructor(call: RentCall) {
    this._call = call;
  }

  get nftStandard(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }

  get nftAddress(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get tokenID(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _lendingID(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get rentDuration(): Array<i32> {
    return this._call.inputValues[4].value.toI32Array();
  }

  get rentAmount(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }
}

export class RentCall__Outputs {
  _call: RentCall;

  constructor(call: RentCall) {
    this._call = call;
  }
}

export class SetBeneficiaryCall extends ethereum.Call {
  get inputs(): SetBeneficiaryCall__Inputs {
    return new SetBeneficiaryCall__Inputs(this);
  }

  get outputs(): SetBeneficiaryCall__Outputs {
    return new SetBeneficiaryCall__Outputs(this);
  }
}

export class SetBeneficiaryCall__Inputs {
  _call: SetBeneficiaryCall;

  constructor(call: SetBeneficiaryCall) {
    this._call = call;
  }

  get newBeneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBeneficiaryCall__Outputs {
  _call: SetBeneficiaryCall;

  constructor(call: SetBeneficiaryCall) {
    this._call = call;
  }
}

export class SetPausedCall extends ethereum.Call {
  get inputs(): SetPausedCall__Inputs {
    return new SetPausedCall__Inputs(this);
  }

  get outputs(): SetPausedCall__Outputs {
    return new SetPausedCall__Outputs(this);
  }
}

export class SetPausedCall__Inputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }

  get newPaused(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPausedCall__Outputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }
}

export class SetRentFeeCall extends ethereum.Call {
  get inputs(): SetRentFeeCall__Inputs {
    return new SetRentFeeCall__Inputs(this);
  }

  get outputs(): SetRentFeeCall__Outputs {
    return new SetRentFeeCall__Outputs(this);
  }
}

export class SetRentFeeCall__Inputs {
  _call: SetRentFeeCall;

  constructor(call: SetRentFeeCall) {
    this._call = call;
  }

  get newRentFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRentFeeCall__Outputs {
  _call: SetRentFeeCall;

  constructor(call: SetRentFeeCall) {
    this._call = call;
  }
}

export class StopLendCall extends ethereum.Call {
  get inputs(): StopLendCall__Inputs {
    return new StopLendCall__Inputs(this);
  }

  get outputs(): StopLendCall__Outputs {
    return new StopLendCall__Outputs(this);
  }
}

export class StopLendCall__Inputs {
  _call: StopLendCall;

  constructor(call: StopLendCall) {
    this._call = call;
  }

  get nftStandard(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }

  get nftAddress(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get tokenID(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _lendingID(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class StopLendCall__Outputs {
  _call: StopLendCall;

  constructor(call: StopLendCall) {
    this._call = call;
  }
}

export class StopRentCall extends ethereum.Call {
  get inputs(): StopRentCall__Inputs {
    return new StopRentCall__Inputs(this);
  }

  get outputs(): StopRentCall__Outputs {
    return new StopRentCall__Outputs(this);
  }
}

export class StopRentCall__Inputs {
  _call: StopRentCall;

  constructor(call: StopRentCall) {
    this._call = call;
  }

  get nftStandard(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }

  get nftAddress(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get tokenID(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _lendingID(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _rentingID(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class StopRentCall__Outputs {
  _call: StopRentCall;

  constructor(call: StopRentCall) {
    this._call = call;
  }
}
